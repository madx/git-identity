#!/bin/bash

USAGE=`cat <<'EOF'
[-d | --define] <identity> <name> <email> [<ssh-file>] [<gpgkeyid>]
   or: git identity [-p | --print] [<identity>]
   or: git identity [-s | --get-settings]
   or: git identity [-r | --remove] <identity>
   or: git identity [-l | --list]
   or: git identity [-R | --list-raw]
   or: git identity [--define-gpg] <gpgkeyid>
   or: git identity [--define-ssh] <ssh-file> [<ssh-verbosity>]
   or: git identity [-u | --update]
   or: git identity [-c | --get-shell-command] [<identity>] [<command>]
   or: git identity <identity>

Specific git-identity actions:
   -d, --define            define new identity and optionally specify ssh-file and gpg key
   -p, --print             print an indenttity or the current one
   -s, --get-settings      get the current settings that git-identity can changes
   -r, --remove            remove an identity
   -l, --list              list all the identities
   -R, --list-raw          list all identities without details
   --define-gpg            add gpg signature to the identity
   --define-ssh            add ssh key to an identity. If it does not have a path, assume '~/.ssh'
                           verbosity (0,1,2) of the ssh agent can also be specified
   -u, --update            refresh the local settings with the global settings of the current identity
   -c,--get-shell-command  get GIT_SSH_COMMAND environment variable for for an identity
                           if it followed by more parameter, execute a command with it

 
EOF
`

lookup () {
  local identity="$1"
  local key="$2"

  git config "identity.$identity.$key"
}

format_identity () {
  local identity="$1"

  echo "[$identity] $(format_raw_identity "$identity")"
}

format_raw_identity () {
  local identity="$1"
  local gpgkey="$(lookup $identity signingkey)"
  local sshkey="$(lookup $identity sshkey)"
  local sshkeyverbosity="$(lookup $identity sshkeyverbosity)"

  
  local output="$(lookup "$identity" name) <$(lookup "$identity" email)>"
  if [ "$gpgkey" != "" -a "$gpgkey" != " " ];
  then
    output="$output (GPG key: $gpgkey)"
  fi

  if [ "$sshkey" != "" -a "$sshkey" != " " ];
  then
    local verbosity=""
    if [ "$sshkeyverbosity" != "" -a "$sshkeyverbosity" != " " ];
    then
      verbosity=" with verbosity $sshkeyverbosity"
    fi
    output="$output (SSH key: $sshkey$verbosity)"
  fi
  
  echo "$output"
}

get_ssh_command () {
  local identity="$1"
  local sshkey="$(lookup $identity sshkey)"
  local sshkeyverbosity="$(lookup $identity sshkeyverbosity)"

  if [ "$sshkey" != "" -a "$sshkey" != " " ];
  then
    local verbosity=""
    case $sshkeyverbosity in
      1) verbosity="-v " ;;
      2) verbosity="-vvv " ;;
      *) verbosity="" ;;
    esac

    if [[ $sshkey != '/'* ]] && [[ $sshkey != '.'* ]]
    then
      sshkey="~/.ssh/$sshkey"
    fi
    echo "ssh $verbosity-i $sshkey"
  else
    echo ''
  fi
}

env_ssh_command () {
  local identity="$1"
  shift

  if [ "x$identity" = "x" ]; then
    identity="$(git config user.identity)"
  fi

  if [ "$identity" == "" -o "$identity" == " " ]
  then
    echo "You need to specify an identity or being in a repository with an identity set"
  else 
    local name="$(lookup "$identity" name)"
    if [ "$name" != "" -a "$name" != " " ]
    then
      local sshCommand="$(get_ssh_command $identity)"
      if [ $# == 0 ]
      then
        echo "GIT_SSH_COMMAND=\"$sshCommand\""
      else 
        GIT_SSH_COMMAND="$sshCommand" "$@"
      fi
    else 
      echo "Identity $identity does not exist. Doing nothing..."
    fi
  fi  
}

use_identity () {
  local identity="$1"
  local name="$(lookup "$identity" name)"
  local email="$(lookup "$identity" email)"
  local gpgkey="$(lookup "$identity" signingkey)"
  local sshCommand="$(get_ssh_command $identity)"

  if [ "$name" != "" -a "$name" != " " ]
  then
    echo "Using identity: $(format_identity "$identity")"
    git config user.identity "$identity"
    git config user.name "$name"
    git config user.email "$email"
  
    # Enable or disable GPG key usage
    if [ "$gpgkey" != "" -a "$gpgkey" != " " ];
    then
      git config user.signingkey "$gpgkey"
	    git config commit.gpgsign true
    else
      git config --unset user.signingkey
      git config --unset commit.gpgsign
    fi
  
    # Enable or disable SSH key usage
    if [ "$sshCommand" != "" ];
    then
      git config core.sshCommand "$sshCommand"
    else 
      git config --unset core.sshCommand
    fi
  else
    echo "Identity $identity does not exist. Doing nothing..."
	echo "$(print_current_identity)"
  fi
}

update_identity () {
    local identity="$(git config user.identity)"
    local prev_settings=$(get_current_settings "$identity" | sed -e 's/^/  /')
    use_identity "$identity"
    local curr_settings=$(get_current_settings "$identity" | sed -e 's/^/  /')
    local diff_string="$(diff --color=always <(echo "$prev_settings") <(echo "$curr_settings"))"
    if [ "$diff_string" != "" -a "$diff_string" != " " ];
    then
      echo "These local setting changed:"
      echo "$diff_string"
    else
      echo "Settings are current. No changes were made."
    fi
}

list_raw_identities () {
  git config --get-regexp '^identity\.' | cut -d"." -f2 | sort -u
}

list_identities () {
  local identities="$(list_raw_identities)"

  echo "Available identities:"
  for identity in $identities; do
    format_identity "$identity"
  done
}

print_raw_identity () {
  local identity="$1"

  if [ "x$identity" = "x" ]; then
    identity="$(git config user.identity)"
  fi

  if [ "$identity" == "" -o "$identity" == " " ]
  then
    echo "You need to specify an identity or being in a repository with an identity set"
  else 
    local name="$(lookup "$identity" name)"
    if [ "$name" != "" -a "$name" != " " ]
    then
      echo "$(format_raw_identity "$identity")"
    else
      echo "Identity $identity does not exist."
    fi
  fi
}

print_current_identity () {
  local identity="$(git config user.identity)"

  if [ "$identity" != "" -a "$identity" != " " ]
  then
    echo "Current identity: $(format_identity "$identity")"
  else
    echo "Current identity: no identity set"
  fi
}

get_current_settings () {
    git config --local --get-regexp '^(user\.|commit\.gpgsign|core.ssh[cC]ommand)' | sort -u
}

define_identity () {
  local identity="$1"
  local name="$2"
  local email="$3"
  local sshkey="$4"
  local gpgkey="$5"

  git config --global identity."$identity".name "$name"
  git config --global identity."$identity".email "$email"

  if [ "$sshkey" != "" -a "$sshkey" != " " ];
  then
    define_ssh $identity $sshkey
  fi

  if [ "$gpgkey" != "" -a "$gpgkey" != " " ];
  then
    define_gpg $identity $gpgkey
  fi

  echo "Created $(format_identity "$identity")"
  echo "Enter 'git identity $identity' to use it in the current repository."
}

remove_identity () {
  local identity="$1"
  local formated_identity="$(format_identity "$identity")"

  git config --global --remove-section identity."$identity"
  echo "Removed $formated_identity"
}

define_gpg () {
  local identity="$1"
  local gpgkey="$2"
  local name="$(lookup "$identity" name)"
  
  if [ "$name" != "" -a "$name" != " " ]
  then
    git config --global identity."$identity".signingkey "$gpgkey"
    echo "Added GPG key $gpgkey to $(format_identity "$identity")"
  
    local current_identity="$(git config user.identity)"
    if [ "$current_identity" == "$identity" ]
    then 
      use_identity "$identity"
    fi
  else
    echo "Error: could not define GPG key for undefined identity '$identity'"
  fi
}

define_ssh () {
  local identity="$1"
  local sshkey="$2"
  local sshkeyverbosity="$3"
  local name="$(lookup "$identity" name)"
  
  if [ "$name" != "" -a "$name" != " " ]
  then
    git config --global identity."$identity".sshkey "$sshkey"
    echo "Added SSH key $sshkey to $(format_identity "$identity")"

    if [ "$sshkeyverbosity" != "" -a "$sshkeyverbosity" != " " ]
    then
      git config --global identity."$identity".sshkeyverbosity "$sshkeyverbosity"
    fi
  
    local current_identity="$(git config user.identity)"
    if [ "$current_identity" == "$identity" ]
    then 
      use_identity "$identity"
    fi
  else
    echo "Error: could not define SSH key for undefined identity '$identity'"
  fi
}

IDENTITY="$1"

check_arguments () {
  if [ $1 -lt $2 ]; then
    usage
    exit 1
  fi
}

# For the some commands, it is ok not being in a git folder
case $IDENTITY in
  -l|--list|-R|--list-raw|-d|--define|--define-gpg|--define-ssh|-r|--remove|-p|--print|-c|--set-shell-command)
    # To prevent git-sh-setup to error out with  'fatal: not a git repository (or any of the parent directories): .git'
    NONGIT_OK=1

esac
SUBDIRECTORY_OK=1
. $(git --exec-path)/git-sh-setup

case $IDENTITY in
  "") print_current_identity ;;

  -s|--get-settings) get_current_settings ;;

  -l|--list) list_identities ;;

  -R|--list-raw) list_raw_identities ;;

  -d|--define)
    shift
    check_arguments $# 3
    define_identity "$1" "$2" "$3" "$4" "$5"
    ;;

  --define-gpg)
    shift
	  check_arguments $# 2
	  define_gpg "$1" "$2"
	;;

  --define-ssh)
    shift
	  check_arguments $# 2
	  define_ssh "$1" "$2" "$3"
	;;
	
  -r|--remove)
    shift
    check_arguments $# 1
    remove_identity "$1"
    ;;

  -p|--print)
    shift
    print_raw_identity "$1"
    ;;

  -u|--update) update_identity "$1" ;;

  -c|--get-shell-command)
    shift
    env_ssh_command "$@"
    ;;
  
  *) use_identity "$IDENTITY" ;;
esac
